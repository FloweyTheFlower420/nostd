#ifndef __NOSTDLIB_FORWARD_LIST_H__
#define __NOSTDLIB_FORWARD_LIST_H__
#include <cstddef>
#include <initializer_list>
#include <iterator>

namespace std
{
    template <typename T>
    class forward_list
    {
        struct __data
        {
            __data* next;
            T value;

            __data() : next(nullptr), value() {}
            __data(T&& t) : next(nullptr), value(forward(t)) {}

            template <typename... Args>
            __data(Args&&... args) : next(nullptr), value(forward(args)...)
            {
            }
        };

        class iterator
        {
            friend forward_list;
            __data* val;

        public:
            using value_type = T;
            using pointer = T*;
            using reference = T&;
            using difference_type = ptrdiff_t;
            using iterator_category = forward_iterator_tag;

            iterator() noexcept : val() {}
            explicit iterator(__data* v) noexcept : val(v) {}

            [[nodiscard]] reference operator*() const noexcept { return val->value; }

            [[nodiscard]] pointer operator->() const noexcept { return &val->value; }

            iterator& operator++() noexcept
            {
                val = val->next;
                return *this;
            }

            iterator operator++(int) noexcept
            {
                iterator __tmp(*this);
                val = val->next;
                return __tmp;
            }

            [[nodiscard]] friend bool operator==(const iterator& x, const iterator& y) noexcept { return x.val == y.val; }

            [[nodiscard]] friend bool operator!=(const iterator& x, const iterator& y) noexcept { return x.val != y.val; }

            iterator next() const noexcept
            {
                if (val)
                    return iterator(val->next);
                else
                    return iterator(nullptr);
            }
        };

        class const_iterator
        {
            friend forward_list;
            __data* val;

        public:
            using value_type = T;
            using pointer = const T*;
            using reference = const T&;
            using difference_type = ptrdiff_t;
            using iterator_category = forward_iterator_tag;

            const_iterator() noexcept : val() {}

            explicit const_iterator(const __data* __n) noexcept : val(__n) {}

            const_iterator(const iterator& __iter) noexcept : val(__iter.val) {}

            [[nodiscard]] reference operator*() const noexcept { return this->val->value; }

            [[nodiscard]] pointer operator->() const noexcept { return &this->val->value; }

            iterator& operator++() noexcept
            {
                val = val->next;
                return *this;
            }

            iterator operator++(int) noexcept
            {
                const_iterator __tmp(*this);
                val = val->next;
                return __tmp;
            }

            [[nodiscard]] friend bool operator==(const const_iterator& __x, const const_iterator& __y) noexcept
            {
                return __x.val == __y.val;
            }

            [[nodiscard]] friend bool operator!=(const const_iterator& __x, const const_iterator& __y) noexcept
            {
                return __x.val != __y.val;
            }

            const_iterator next() const noexcept
            {
                if (this->val)
                    return const_iterator(val->next);
                else
                    return const_iterator(nullptr);
            }
        };

        __data* start;
        __data* end_element;
        size_t s;

    public:
        using value_type = T;
        using size_type = size_t;
        using difference_type = ptrdiff_t;
        using reference = T&;
        using const_reference = const T&;
        using pointer = T*;
        using const_pointer = const T*;

        constexpr forward_list() : s(0), start(nullptr) {}
        forward_list(size_type count, const T& value) { assign(count, value); }

        explicit forward_list(size_type count)
        {
            start = end_element = nullptr;
            __data* curr = (__data*)&start;
            s = count;
            while (count--)
            {
                end_element = curr->next = new __data();
                curr = curr->next;
            }
        }

        template <typename It>
        forward_list(It first, It last)
        {
            assign(first, last);
        };

        forward_list(const forward_list& other) : forward_list(other.begin(), other.end()) {}
        forward_list(forward_list&& other)
        {
            s = other.s;
            start = other.start;
            other.s = 0;
            other.s = nullptr;
        }

        forward_list(initializer_list<T> init) : forward_list(init.begin(), init.end()) {}

        forward_list& operator=(const forward_list& other)
        {
            assign(other.begin(), other.end());
            return *this;
        }

        forward_list& operator=(forward_list&& other)
        {
            s = other.s;
            start = other.start;
            other.s = 0;
            other.start = nullptr;
            return *this;
        }
        forward_list& operator=(initializer_list<T> il)
        {
            assign(il);
            return *this;
        }

        ~forward_list() { clear(); }

        void assign(size_type count, const T& value)
        {
            clear();
            __data* curr = (__data*)&start;
            s = count;
            while (count--)
            {
                end_element = curr->next = new __data(value);
                curr = curr->next;
            }
        }

        template <class It>
        void assign(It first, It last)
        {
            clear();
            __data* curr = (__data*)&start;
            while (first != last)
            {
                end_element = curr->next = new __data(*first);
                curr = curr->next;
                first++;
                s++;
            }
        }

        void assign(initializer_list<T> il) { assign(il.begin(), il.end()); }

        reference front() { return start->value; }
        const_reference front() const { return start->value; }

        iterator before_begin() noexcept { return iterator((__data*)&start); }
        const_iterator before_begin() const noexcept { return const_iterator((__data*)&start); }
        const_iterator cbefore_begin() const noexcept { return const_iterator((__data*)&start); }

        iterator begin() noexcept { return iterator(start); }
        const_iterator begin() const noexcept { return const_iterator(start); }
        const_iterator cbegin() const noexcept { return const_iterator(start); }

        iterator end() noexcept { return iterator(end_element); }
        const_iterator end() const noexcept { return const_iterator(end_element); }
        const_iterator cend() const noexcept { return const_iterator(end_element); }

        [[nodiscard]] bool empty() const noexcept { return s == 0; }
        size_type max_size() const noexcept { return (size_type)-1; }

        void clear()
        {
            s = 0;
            end_element = nullptr;
            while (start)
            {
                __data* tmp = start;
                start = start->next;
                delete tmp;
            }
        }

        iterator insert_after(const_iterator pos, const T& value)
        {
            s++;
            auto newval = pos.val;
            pos.val = new __data(value);
            pos.val->next = newval;
            return iterator(pos.next().val);
        }

        iterator insert_after(const_iterator pos, T&& value)
        {
            s++;
            auto newval = pos.val;
            pos.val = new __data(value);
            pos.val->next = newval;
            return iterator(pos.val->next);
        }

        iterator insert_after(const_iterator pos, size_type count, const T& value)
        {
            s += count;
            while (count--)
                insert_after(pos, value);

            return iterator(pos.val->next);
        }

        template <typename It>
        iterator insert_after(const_iterator pos, It first, It last)
        {
            while (first != last)
            {
                insert_after(pos, *first);
                first++;
                s++;
            }

            return iterator(pos.val->next);
        }

        iterator insert_after(const_iterator pos, initializer_list<T> il) { insert_after(pos, il.begin(), il.end()); }

        template <typename... Args>
        iterator emplace_after(const_iterator pos, Args&&... args)
        {
            s++;
            auto newval = pos.val;
            pos.val = new __data(forward(args)...);
            pos.val->next = newval;
            return iterator(pos.next().val);
        }

        iterator erase_after(const_iterator pos)
        {
            auto tmp = pos.val->next;
            if (pos.val->next)
                pos.val->next = pos.val->next->next;
            delete tmp;
        }

        iterator erase_after(const_iterator first, const_iterator last)
        {
            // TODO: implement
        }
    };
} // namespace std

#endif
