// vim: set ft=cpp:
#include <cstddef>
#include <new>
#include <type_traits>
#include <utility>

namespace std
{
    namespace detail
    {
        template <typename T>
        class simple_cyclic_queue
        {
            size_t head, tail;
            T& at(size_t index, char* buf, size_t real_size) { return *((T*)&buf[(index % real_size) * sizeof(T)]); }

        public:
            simple_cyclic_queue() { head = tail = 0; }
            bool empty(size_t s) { return head % s == tail % s; }
            size_t size(size_t s) { return (head + s - tail) % s; }
            T& front(char* b, size_t s) { return at(tail + 1, b, s); }

            T& back(char* b, size_t s) { return at(head, b, s); }

            void push_checked(const T& v, char* b, size_t s)
            {
                if ((head + 1) % s == tail)
                    tail++;

                new (&at(head++, b, s)) T(v);
            }

            template <typename... Args>
            void emplace_checked(char* b, size_t s, Args&&... args)
            {
                if ((head + 1) % s == tail)
                    tail++;

                new (&at(head++, b, s)) T(forward<Args>(args)...);
            }

            bool push(const T& v, char* b, size_t s)
            {
                if ((head + 1) % s == tail)
                    return false;

                new (&at(head++, b, s)) T(v);
                return true;
            }

            template <typename... Args>
            bool emplace(char* b, size_t s, Args&&... args)
            {
                if ((head + 1) % s == tail)
                    return false;

                new (&at(head++, b, s)) T(forward<Args>(args)...);
                return true;
            }

            void pop()
            {
                tail++;
                at(tail).~T();
            }

            ~simple_cyclic_queue()
            {
                for (size_t i = 0; i < size(); i++)
                    pop();
            }
        };
    } // namespace detail

    template <typename T, size_t N, bool inplace = sizeof(T) * N < 256>
    class cyclic_queue : detail::simple_cyclic_queue<T>
    {
        inline static constexpr size_t real_size = N + 1;
        using buffer_t = conditional_t<inplace, char[real_size * sizeof(T)], char*>;

        buffer_t buf;

    public:
        cyclic_queue()
        {
            if constexpr (!inplace)
                buf = new char[real_size * sizeof(T)];
        }

        bool empty() { return detail::simple_cyclic_queue<T>::empty(real_size); }
        size_t size() { return detail::simple_cyclic_queue<T>::size(real_size); }
        T& front() { return detail::simple_cyclic_queue<T>::front(buf, real_size); }
        T& back() { return detail::simple_cyclic_queue<T>::back(buf, real_size); }
        bool push_checked(const T& v) { return detail::simple_cyclic_queue<T>::push_checked(v, buf, real_size); }

        template <typename... Args>
        bool emplace_checked(Args&&... args)
        {
            return detail::simple_cyclic_queue<T>::emplace_checked(buf, real_size, std::forward<Args>(args)...);
        }

        void push(const T& v) { return detail::simple_cyclic_queue<T>::push(v, buf, real_size); }

        template <typename... Args>
        bool emplace(Args&&... args)
        {
            return detail::simple_cyclic_queue<T>::push(buf, real_size, std::forward<Args>(args)...);
        }

        void pop() { return detail::simple_cyclic_queue<T>::pop(buf, real_size); }

        ~cyclic_queue()
        {
            if constexpr (!inplace)
                delete[] buf;
        }
    };

    template <typename T>
    class dynamic_cyclic_queue : detail::simple_cyclic_queue<T>
    {
        char* buf;
        size_t s;

    public:
        dynamic_cyclic_queue(size_t n) : s(n + 1), buf(new char[s * sizeof(T)]) {}
        bool empty() { return detail::simple_cyclic_queue<T>::empty(s); }
        size_t size() { return detail::simple_cyclic_queue<T>::size(s); }
        T& front() { return detail::simple_cyclic_queue<T>::front(buf, s); }
        T& back() { return detail::simple_cyclic_queue<T>::back(buf, s); }
        bool push_checked(const T& v) { return detail::simple_cyclic_queue<T>::push_checked(v, buf, s); }

        template <typename... Args>
        bool emplace_checked(Args&&... args)
        {
            return detail::simple_cyclic_queue<T>::emplace_checked(buf, s, std::forward<Args>(args)...);
        }

        void push(const T& v) { return detail::simple_cyclic_queue<T>::push(v, buf, s); }

        template <typename... Args>
        bool emplace(Args&&... args)
        {
            return detail::simple_cyclic_queue<T>::push(buf, s, std::forward<Args>(args)...);
        }

        void pop() { return detail::simple_cyclic_queue<T>::pop(buf, s); }

        ~dynamic_cyclic_queue() { delete[] buf; }
    };

    template <typename T>
    class inplace_cyclic_queue : detail::simple_cyclic_queue<T>
    {
        char* buf;
        size_t s;

    public:
        inplace_cyclic_queue(size_t n, char* buf) : s(n + 1), buf(buf) { }

        bool empty() { return detail::simple_cyclic_queue<T>::empty(s); }
        size_t size() { return detail::simple_cyclic_queue<T>::size(s); }
        T& front() { return detail::simple_cyclic_queue<T>::front(buf, s); }
        T& back() { return detail::simple_cyclic_queue<T>::back(buf, s); }
        bool push_checked(const T& v) { return detail::simple_cyclic_queue<T>::push_checked(v, buf, s); }

        template <typename... Args>
        bool emplace_checked(Args&&... args)
        {
            return detail::simple_cyclic_queue<T>::emplace_checked(buf, s, std::forward<Args>(args)...);
        }

        void push(const T& v) { return detail::simple_cyclic_queue<T>::push(v, buf, s); }

        template <typename... Args>
        bool emplace(Args&&... args)
        {
            return detail::simple_cyclic_queue<T>::push(buf, s, std::forward<Args>(args)...);
        }

        void pop() { return detail::simple_cyclic_queue<T>::pop(buf, s); }

        ~inplace_cyclic_queue() { }
    };
} // namespace std
